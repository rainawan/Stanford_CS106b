Fundamentals of Recursion Warmup
------

Q1. Looking at a call stack listing in a debugger, what is the indication that the program being debugged uses recursion?
A1. The input value of factorial(int n) decreases with each call to itself, until it reaches the base case of 0. It then increases back to its original value, an indication that the function was broken down into a smaller problem, then built up again.

Q2. Describe how the symptoms of infinite recursion differ from the symptoms of an infinite loop.
A2. An infinite loop detects the decreasing / increasing n one value at a time, until it reaches a certain bound. The infinite recursion has a stack, where the top of the stack is zero but the second stack is its most negative value before crashing. Recursively, it decreases starting from the bottom of the stack.

Q3. What was the number of iterations of `recPower` did it take on your system to amount to a quarter second? Copy/paste the time results of the two time trial sequences running on that number of iterations.
A3. A size of 1000 resulted in a quarter second run time. 
Line 101 TIME_OPERATION manyPowerCalls(5, size) (size = 1000) completed in    0.25 secs

Q4. Explain how the recursive structure of `recPower` results in a Big-O runtime of `O(logN)` relative to the size of its `exp` argument.
A4. Within the recPower function, there is a recursive call to itself with the exponent halved. This recurring decrease in size is an indication that the function has a runtime complexity of O(logN).

Merge
-----

Q5. Include the data from your execution timing and explain how it supports your Big O prediction for `binaryMerge`.
A5. I predict that the time complexity of binaryMerge is O(n). It first checks if the queues are sorted, which takes O(n) time each. Then it traverses both queues, enqueueing the smaller element onto a result queue. Both enqueue and dequeue functions are of O(1) time complexity. The table below supports my prediction because as I double the input size, the time is also doubling, which is an O(n) operation.

       Size : Time
2000000 : 0.324 sec
4000000 : 0.648 sec
8000000 : 1.285 sec
32000000 : 5.238 sec

Q6. Include the data from your execution timing and explain how it supports your Big O prediction for `naiveMultiMerge`.
A6. I predict that the time complexity of naiveMultiMerge is O(k * n), where k is the number of queues and n is the size of each queue. The data below supports my prediction because initially the function runs quick but once the size increases, the it takes much longer for the function to run.

   Size : Time
10000 : 0.815 sec
40000 : 12.708 sec
80000 : 50.188 sec
100000 : 78.183 sec

Q7. Include the data from your execution timing and explain how it demonstrates `O(n log k)` runtime for `recMultiMerge`.
A7. recMultiMerge has a O(n logk) time complexity. Since we are recursively splitting the size of the vector by half each time, k times, we get log k runtime.  Each queue within the vector is of size n. We must iterate through every element once when merging two vectors, thus getting O(n).

     Size : Time
100000 : 0.808 sec
200000 : 1.709 sec
400000 : 3.625 sec
800000 : 7.652 sec

Recursive Backtracking Warmup
-----------------------------

Q8. What is the value of `totalMoves` after stepping over the call to `moveTower` in `hanoiAnimation`?
A8. The value of totalMoves is 15. 

Q9. What is the value of the `totalMoves` variable after stepping over the first recursive sub-call? (In other words, within `moveTower` just after stepping over the first recursive sub-call to `moveTower` inside the `else` statement.)
A9. The totalMoves variable is 7. 

Q10. After breaking at the base case of `moveTower` and then choosing Step Out, where do you end up? (What function are you in, and at what line number?) What is the value of the `totalMoves` variable at this point?
A10. I end up going back to the line where I called hanoiAnimation(), inside the PROVIDED_TEST function. This is line 93.

Q11. What is the smallest possible input that you used to trigger the bug in the program?
A11. I tested a vector of size one, which triggered an error in the program.

Q12. Identify the one-character error in the code and explain why that one-character bug causes the function to return the output you see when running on the minimal input you listed above. You should be able to specifically account for how the error causes the result to change from “completely correct” to “terribly wrong.”
A12. The buggyCount recursive call is incorrect. Instead of adding the current sum to the new index one time, the value of the current sum within the function gets changed before the second recursive call. In the example {3, 1, -3}, the sumSoFar when adding the second value, 1, should be 4 (inclusive) and 0 (exclusive). However, since the function modifies the sumSoFar variable adding v[index] to itself, we get an incorrect output.

Text Predict
------------

Q13. In your own words, identify the drawbacks to using global variables and explain why a program-wide constant like keypad does not suffer from the same drawbacks.
Q13. Global variables are shared between all functions. The variables enter and exit as changed parameter values. It is best practice not to declare variables within a narrow scope to avoid redefinition, changed, value, and bugs. The keypad constant should not suffer from the same drawbacks because its constant value is always the same. There is never a case where the number 6 maps to letters “ABC.” Thus, it is appropriate to declare keypad as a program-wide constant.
